* Editing encrypted files in Emacs
I routinely store note files (normally using ~org-mode~) in personal Git repos, which I commit automatically using [[https://github.com/ryuslash/git-auto-commit-mode][git-auto-commit-mode]].

This works really well, but sometimes I'm working on some notes that I want to be ultra-safe in the event that my Git repo was maliciously accessed. On these occasions, I make use of Emacs' transparent support for editing GPG-encrypted files. Emacs does a fine job of transparently decrypting files when I open them, and encrypting them when I save them. However, I need to make sure that the encryption keys I use for the files are portable across machines, otherwise I might end up with files I can never open again! ðŸ˜…

In this post, I briefly describe how I make keys portable, as well as how I use Emacs to edit encrypted files.

** Generating, exporting, and importing a GPG key
Before using a key to encrypt your notes, you need to generate a key, and make sure you can use it between machines.

First of all, generate a new key with:

#+begin_src bash
gpg --full-generate-key
#+end_src

Once you've generated a key, you should be able to see it with:

#+begin_src bash
gpg --list-keys
#+end_src

You should see some output like this:

#+begin_example
pub   ed25519 2024-01-01 [SC]
      3453298457893DFHJKEHFGKJHFGKJSEH34Y78365
uid           [ultimate] James Kirk (Self-destruct key) <jkirk@starfleet.com>
sub   cv25519 2024-01-01 [E]
#+end_example

Make a note of they key's ID, which is ~3453298457893DFHJKEHFGKJHFGKJSEH34Y78365~ in this example.

Now, you can export it as plain-text with:

#+begin_src bash
gpg --armor --export-key <key-id> > public.key
gpg --armor --export-secret-key <key-id> > private.key
#+end_src

Keep these files safe, and take care transmitting them to your other machines! I store them in a password manager.

These keys can be imported with:

#+begin_src bash
gpg --import public.key
gpg --import private.key
#+end_src

And, finally, your imported key can be trusted with (choose option 5, ultimate trust):

#+begin_src bash
gpg --edit-key <key-id> trust quit
#+end_src

Now you're all set with an encryption key you can distribute between your machines! ðŸ”’
** TODO Configuring Emacs to work well with encrypted files
